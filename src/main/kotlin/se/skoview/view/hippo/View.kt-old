/**
 * Copyright (C) 2013-2020 Lars Erik Röjerås
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package se.skoview.view.hippo

import io.kvision.core.*
import io.kvision.form.InputSize
import io.kvision.form.select.selectInput
import io.kvision.html.*
import io.kvision.html.Align
import io.kvision.panel.SimplePanel
import io.kvision.panel.vPanel
import io.kvision.state.stateBinding
import io.kvision.utils.perc
import io.kvision.utils.px
import se.skoview.model.*

data class ViewInformation(
    val baseItem: BaseItem,
    val showData: String,
    val type: ItemType
)

object hippoPage : SimplePanel() {

    init {

        vPanel {
            div {
                h2("RHippo - integrationer via tjänsteplattform/ar för nationell e-hälsa")
                div("Integrationer för tjänsteplattformar vars tjänstadresseringskatalog (TAK) är tillgänglig i Ineras TAK-api visas.").apply {
                    width = 100.perc
                }
            }.apply {
                width = 100.perc
                background = Background(0x113d3d)
                align = Align.CENTER
                color = Color(Col.WHITE)
                marginTop = 5.px
            }
        }
        vPanel {
        }.apply {
            width = 100.perc
            clear = Clear.BOTH
            margin = 0.px
            background = Background(0xf6efe9)
        }.stateBinding(store) { state ->
            div(classes = setOf(""""class="cssload-loader""""))
            div {
                //add(DateSelectPanel(state.updateDates, state.dateEffective.toSwedishDate()))
                val dateOptionList = state.updateDates.map { Pair(it, it) }
                selectInput(
                    options = dateOptionList,
                    value = state.dateEffective
                )
                    .apply {
                        selectWidth = CssSize(150, UNIT.px)
                        size = InputSize.SMALL
                    }
                    .onEvent {
                        change = {
                            println("Date selected:")
                            console.log(self.value)
                            store.dispatch(HippoAction.DateSelected(self.value ?: ""))
                            store.dispatch { dispatch, getState ->
                                dispatch(HippoAction.DateSelected(self.value ?: ""))
                                loadIntegrations(getState())
                            }
                        }
                    }
            }
        }
        vPanel {
        }.apply {
            //background = Background(0x009090)
            width = 100.perc
        }.stateBinding(store) { state ->
            if (state.showIntegrations) {
                println("- - - - View invoked - - - ")

                val integrationLists = createViewData(state)

                //println("========================> Actions submitter: ${state::class.simpleName}")
                val consumerHeading: String =
                    "Tjänstekonsumenter (${integrationLists.serviceConsumers.size}/${state.maxCounters.consumers})"
                val contractHeading: String =
                    "Tjänstekontrakt (${integrationLists.serviceContracts.size}/${state.maxCounters.contracts})"
                val plattformHeading: String =
                    "Tjänsteplattformar (${integrationLists.plattformChains.size}/${state.maxCounters.plattformChains})"
                val logicalAddressHeading: String =
                    "Logiska adresser (${integrationLists.logicalAddresses.size}/${state.maxCounters.logicalAddress})"
                val producerHeading: String =
                    "Tjänsteproducenter (${integrationLists.serviceProducers.size}/${state.maxCounters.producers})"

                val viewConsumerLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.serviceConsumers.map {
                    viewConsumerLst.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.hsaId}",
                            ItemType.CONSUMER
                        )
                    )
                }

                val viewContractLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.domainsAndContracts.map {
                    if (it::class.simpleName == "ServiceDomain") {
                        val desc = "<b>${it.description}</b>"
                        viewContractLst.add(ViewTableInformation(it, desc, ItemType.DOMAIN))
                    } else {
                        val desc = it.description
                        viewContractLst.add(ViewTableInformation(it, desc, ItemType.CONTRACT))
                    }
                }

                val viewPlattformList: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.plattformChains.map {
                    viewPlattformList.add(
                        ViewTableInformation(
                            it,
                            it.name,
                            ItemType.PLATTFORM_CHAIN
                        )
                    )
                }

                val viewLogicalAddressList: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.logicalAddresses.map {
                    viewLogicalAddressList.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.name}",
                            ItemType.LOGICAL_ADDRESS
                        )
                    )
                }

                val viewProducerLst: MutableList<ViewTableInformation> = mutableListOf()
                integrationLists.serviceProducers.map {
                    viewProducerLst.add(
                        ViewTableInformation(
                            it,
                            "<i>${it.description}</i><br>${it.hsaId}",
                            ItemType.PRODUCER
                        )
                    )
                }

                add(
                    //HippoTabulatorPage(
                    HippoTablePage(
                        consumerHeading,
                        contractHeading,
                        plattformHeading,
                        logicalAddressHeading,
                        producerHeading,
                        viewConsumerLst,
                        viewContractLst,
                        viewPlattformList,
                        viewLogicalAddressList,
                        viewProducerLst
                    )
                )
            }
        }
    }
}

